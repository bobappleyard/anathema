// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/bobappleyard/anathema/rest/runner (interfaces: ServerConfig)

// Package runner is a generated GoMock package.
package runner

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockServerConfig is a mock of ServerConfig interface.
type MockServerConfig struct {
	ctrl     *gomock.Controller
	recorder *MockServerConfigMockRecorder
}

// MockServerConfigMockRecorder is the mock recorder for MockServerConfig.
type MockServerConfigMockRecorder struct {
	mock *MockServerConfig
}

// NewMockServerConfig creates a new mock instance.
func NewMockServerConfig(ctrl *gomock.Controller) *MockServerConfig {
	mock := &MockServerConfig{ctrl: ctrl}
	mock.recorder = &MockServerConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServerConfig) EXPECT() *MockServerConfigMockRecorder {
	return m.recorder
}

// ConfigureServer mocks base method.
func (m *MockServerConfig) ConfigureServer(arg0 context.Context, arg1 *http.Server) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigureServer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfigureServer indicates an expected call of ConfigureServer.
func (mr *MockServerConfigMockRecorder) ConfigureServer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigureServer", reflect.TypeOf((*MockServerConfig)(nil).ConfigureServer), arg0, arg1)
}
