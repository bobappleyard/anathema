package util

import (
	"github.com/bobappleyard/anathema/server/a"
	"io"
	"path/filepath"
	"text/template"
)

type fileOps interface {
	Replace(path string) (io.WriteCloser, error)
}

type generator struct {
	a.Service

	Ops fileOps
}

type packageInfo struct {
	Notice     string
	Package    string
	Components []string
}

var packageTemplate = template.Must(template.New("package").Parse(`{{.Notice}}
package {{.Package}}

import (
	"github.com/bobappleyard/anathema/component/registry"
	"reflect"
)

func init () {
{{range .Components}}	registry.RegisterType(reflect.TypeOf(new({{.}})).Elem())
{{end}}}
`))

func (g *generator) GenerateComponentFile(name, path string, components []string) error {
	f, err := g.Ops.Replace(filepath.Join(path, "anathema_components.go"))
	if err != nil {
		return err
	}
	defer f.Close()

	return packageTemplate.Execute(f, packageInfo{
		Notice:     "// Code generated by anathema, DO NOT EDIT.",
		Package:    name,
		Components: components,
	})
}

var appTemplate = template.Must(template.New("package").Parse(`{{.Notice}}
package {{.Package}}

import (
{{range .Packages}}	_ {{printf "%q" .}}
{{end}})
`))

type appInfo struct {
	Notice   string
	Package  string
	Packages []string
}

func (g *generator) GenerateImportFile(name, path string, imports []string) error {
	f, err := g.Ops.Replace(filepath.Join(path, "anathema_application.go"))
	if err != nil {
		return err
	}
	defer f.Close()

	return appTemplate.Execute(f, appInfo{
		Notice:   "// Code generated by anathema, DO NOT EDIT.",
		Package:  name,
		Packages: imports,
	})
}
